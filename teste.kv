from kivy.app import App
from kivy.uix.gridlayout import GridLayout
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput

class SudokuApp(App):
    def build(self):
        main_layout = BoxLayout(orientation='vertical')

        # Top bar layout
        top_bar = BoxLayout(size_hint_y=0.1, padding=[10, 10, 10, 10])
        top_bar.add_widget(Label(text="Sudoku.com", font_size='20sp', halign="left"))
        top_bar.add_widget(Button(text="Novo jogo", size_hint_x=0.3))
        main_layout.add_widget(top_bar)

        # Sudoku grid layout
        grid = GridLayout(cols=9, rows=9, size_hint=(1, 0.7))
        grid_padding = [[(i + .CENTERALENEX은– codde?)APP

Segue o código corrigido e completo para a criação de um layout de Sudoku com a biblioteca Kivy:

```python
from kivy.app import App
from kivy.uix.gridlayout import GridLayout
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput


class SudokuApp(App):
    def build(self):
        main_layout = BoxLayout(orientation="vertical")

        # Top bar layout
        top_bar = BoxLayout(size_hint_y=0.1, padding=[10, 10, 10, 10])
        top_bar.add_widget(Label(text="Sudoku.com", font_size="20sp", halign="left"))
        top_bar.add_widget(Label(text="Díficil", font_size="16sp", size_hint_x=0.3))
        top_bar.add_widget(Label(text="Erros: 0/3", font_size="16sp"))
        top_bar.add_widget(Label(text="Pontuação: 0", font_size="16sp"))
        top_bar.add_widget(Button(text="Novo jogo", size_hint_x=0.3))
        main_layout.add_widget(top_bar)

        # Sudoku grid layout
        grid = GridLayout(cols=9, rows=9, size_hint=(1, 0.7), padding=5, spacing=2)
        for row in range(9):
            for col in range(9):
                # Add TextInput for the Sudoku grid
                grid.add_widget(TextInput(font_size=24, halign="center", multiline=False))
        main_layout.add_widget(grid)

        # Bottom bar for number input
        number_bar = BoxLayout(size_hint_y=0.1, padding=5, spacing=5)
        for i in range(1, 10):
            number_bar.add_widget(Button(text=str(i), font_size="20sp"))
        main_layout.add_widget(number_bar)

        return main_layout


if _name_ == "_main_":
    SudokuApp().run()
























from kivy.app import App
from kivy.uix.gridlayout import GridLayout
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label

import numpy as np


class SudokuApp(App):
    def build(self):
        # Layout principal
        main_layout = BoxLayout(orientation="vertical", padding=10, spacing=10)

        # Tabuleiro de Sudoku
        self.grid = GridLayout(cols=9, rows=9, spacing=2, size_hint=(1, 0.8))
        self.inputs = []

        # Preencher o tabuleiro com entradas
        for i in range(9):
            row = []
            for j in range(9):
                # Criar células editáveis para o Sudoku
                input_box = TextInput(
                    multiline=False,
                    halign='center',
                    font_size=24,
                    input_filter="int"  # Apenas números
                )
                self.grid.add_widget(input_box)
                row.append(input_box)
            self.inputs.append(row)

        main_layout.add_widget(self.grid)

        # Botões de ação
        button_layout = BoxLayout(size_hint=(1, 0.2))
        check_button = Button(text="Verificar Solução", font_size=20)
        reset_button = Button(text="Limpar Tabuleiro", font_size=20)

        check_button.bind(on_press=self.check_solution)
        reset_button.bind(on_press=self.clear_board)

        button_layout.add_widget(check_button)
        button_layout.add_widget(reset_button)
        main_layout.add_widget(button_layout)

        # Label de status
        self.status_label = Label(text="", font_size=18, size_hint=(1, 0.1))
        main_layout.add_widget(self.status_label)

        return main_layout

    def get_board(self):
        """Obtém os valores do tabuleiro em uma matriz."""
        board = []
        for row in self.inputs:
            board_row = []
            for cell in row:
                value = cell.text
                board_row.append(int(value) if value.isdigit() else 0)
            board.append(board_row)
        return np.array(board)

    def check_solution(self, instance):
        """Verifica se o tabuleiro segue as regras do Sudoku."""
        board = self.get_board()
        if self.is_valid_solution(board):
            self.status_label.text = "Parabéns! Solução correta!"
        else:
            self.status_label.text = "Solução incorreta. Tente novamente."

    def clear_board(self, instance):
        """Limpa o tabuleiro."""
        for row in self.inputs:
            for cell in row:
                cell.text = ""
        self.status_label.text = ""

    def is_valid_solution(self, board):
        """Valida se o tabuleiro é uma solução válida de Sudoku."""
        # Verifica linhas, colunas e subgrades
        for i in range(9):
            if not self.is_valid_group(board[i, :]):  # Linha
                return False
            if not self.is_valid_group(board[:, i]):  # Coluna
                return False

        # Verifica subgrades 3x3
        for row in range(0, 9, 3):
            for col in range(0, 9, 3):
                subgrid = board[row:row + 3, col:col + 3].flatten()
                if not self.is_valid_group(subgrid):
                    return False

        return True

    def is_valid_group(self, group):
        """Verifica se o grupo (linha, coluna ou subgrade) contém números únicos de 1 a 9."""
        group = [num for num in group if num != 0]  # Remove zeros (células vazias)
        return len(group) == len(set(group)) and all(1 <= num <= 9 for num in group)


if __name__ == "__main__":
    SudokuApp().run()